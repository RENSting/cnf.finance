@model YearProjectReportViewModel

@{
    ViewData["Title"] = "项目报告";

    var lastIncoming = Model.Project.AnnualBalance
                            .Where(b => b.Year == Model.Year - 1 && BalanceCategory.Incoming == (BalanceCategory)b.BalanceCategory)
                            .Sum(b => b.Balance);
    var lastSettlement = Model.Project.AnnualBalance
                            .Where(b => b.Year == Model.Year - 1 && BalanceCategory.Settlement == (BalanceCategory)b.BalanceCategory)
                            .Sum(b => b.Balance);
    var lastTax = (decimal)Model.Project.TaxRate * lastSettlement;
    var lastRetrieved = Model.Project.AnnualBalance
                            .Where(b => b.Year == Model.Year - 1 && BalanceCategory.Retrievable == (BalanceCategory)b.BalanceCategory)
                            .Sum(b => b.Balance);
    //以下六个变量各自用于累加存货和应收的月度计划和完成。
    var totalPlanTax = lastTax;
    var totalPlanStorage = lastIncoming - lastSettlement;
    var totalPlanRecievable = lastSettlement + lastTax - lastRetrieved;
    var totalPerformTax = lastTax;
    var totalPerformStorage = totalPlanStorage;
    var totalPerformRecievable = totalPlanRecievable;

}

<h4 class="text-center mb-4">
    项目两金压降@(Model.Year)年度情况表（单位：万元）
    <a asp-action="YearGroupReport" asp-controller="Analysis" class="float-left" style="font-size:small;"
       asp-all-route-data='new Dictionary<string, string> {
        {"GroupId", Model.OrgId.ToString() },
        {"year", Model.Year.ToString() },
        {"month", Model.Month.ToString() }
    }'>返回上级</a>
</h4>

<table class="table table-sm table-bordered">
    <thead class="thead-light">
        <tr>
            <th>项目名称</th>
            <th colspan="12">@Model.Project.Name</th>
        </tr>
        <tr>
            <th>项目工期</th>
            <th colspan="12">
                @string.Format("{0:yyyy年MM月dd日} - {1:yyyy年MM月dd日}", Model.Project.StartDate, Model.Project.EndDate)
                <div class="float-right">

                    @if (Model.Project.HasProblem)
                    {
                        <span class="badge badge-danger">涉诉</span>
                    }
                    @switch ((ProjectStatus)Model.Project.Status)
                    {
                        case ProjectStatus.Processing:
                            <span class="badge badge-info">在建工程</span>
                            break;
                        case ProjectStatus.WaitForSettle:
                            <span class="badge badge-warning">已完工未结算</span>
                            break;
                        case ProjectStatus.SettleCompleted:
                            <span class="badge badge-success">已完工已结算</span>
                            break;
                        case ProjectStatus.Stopped:
                            <span class="badge badge-danger">停工</span>
                            break;
                        default:
                            <span class="badge badge-primary">未知状态</span>
                            break;
                    }
                </div>
            </th>
        </tr>
        <tr>
            <th>财务指标</th>
            <th colspan="12">
                预计总收入：@string.Format("{0:N} 万元", Model.Project.ContractAmount)
                &nbsp;&nbsp;
                预计毛利率：@Html.DisplayFor(m => m.Project.EstimatingProfit)%
                &nbsp;&nbsp;
                税率：@Html.DisplayFor(m => m.Project.TaxRate)
            </th>
        </tr>
    </thead>
    <tbody class="text-right">
        <tr class="bg-dark text-white">
            <td></td>
            <td colspan="2">收入</td>
            <td colspan="2">结算</td>
            <td colspan="2">税金</td>
            <td colspan="2">回款</td>
            <td colspan="2">存货</td>
            <td colspan="2">应收</td>
        </tr>
        <tr>
            <td>@string.Format("{0:0000}年结转", Model.Year)</td>
            <td colspan="2">@string.Format(new AccNumberFormatter(), "{0:N}", lastIncoming)</td>
            <td colspan="2">@string.Format(new AccNumberFormatter(), "{0:N}", lastSettlement)</td>
            <td colspan="2">@string.Format(new AccNumberFormatter(), "{0:N}", lastTax)</td>
            <td colspan="2">@string.Format(new AccNumberFormatter(), "{0:N}", lastRetrieved)</td>
            <td colspan="2">@string.Format(new AccNumberFormatter(), "{0:N}", totalPlanStorage)</td>
            <td colspan="2">@string.Format(new AccNumberFormatter(), "{0:N}", totalPlanRecievable)</td>
        </tr>
        <tr>
            <td></td>
            <td class="text-primary">计划</td>
            <td class="text-success">完成</td>
            <td class="text-primary">计划</td>
            <td class="text-success">完成</td>
            <td class="text-primary">计划</td>
            <td class="text-success">完成</td>
            <td class="text-primary">计划</td>
            <td class="text-success">完成</td>
            <td class="text-primary">计划</td>
            <td class="text-success">完成</td>
            <td class="text-primary">计划</td>
            <td class="text-success">完成</td>
        </tr>
        @for (var m = 1; m < 13; m++)
        {
            var planIncoming = Model.Project.Plan.Where(p => p.Year == Model.Year && p.Month == m).Sum(p => p.Incoming);
            var planSettlement = Model.Project.Plan.Where(p => p.Year == Model.Year && p.Month == m).Sum(p => p.Settlement);
            var planRetrived = Model.Project.Plan.Where(p => p.Year == Model.Year && p.Month == m).Sum(p => p.Retrieve);
            var planTax = (decimal)Model.Project.TaxRate * planSettlement;
            var planStorage = planIncoming.SubstractNullableDecimal(planSettlement);
            var planRecievable = planSettlement.AddNullableDecimal(planTax).SubstractNullableDecimal(planRetrived);

            var performIncoming = Model.Project.Perform.Where(p => p.Year == Model.Year && p.Month == m).Sum(p => p.Incoming);
            var performSettlement = Model.Project.Perform.Where(p => p.Year == Model.Year && p.Month == m).Sum(p => p.Settlement);
            var performRetrived = Model.Project.Perform.Where(p => p.Year == Model.Year && p.Month == m).Sum(p => p.Retrieve);
            var performTax = (decimal)Model.Project.TaxRate * performSettlement;
            var performStorage = performIncoming.SubstractNullableDecimal(performSettlement);
            var performRecievable = performSettlement.AddNullableDecimal(performTax).SubstractNullableDecimal(performRetrived);
            totalPlanTax = totalPlanTax + planTax ?? 0M;
            totalPlanStorage = totalPlanStorage + planStorage ?? 0M;
            totalPlanRecievable = totalPlanRecievable + planRecievable ?? 0M;
            totalPerformTax = totalPerformTax + performTax ?? 0M;
            totalPerformStorage = totalPerformStorage + performStorage ?? 0M;
            totalPerformRecievable = totalPerformRecievable + performRecievable ?? 0M;
            <tr>
                <td>@string.Format("{0:0000}年{1:00}月", Model.Year, m)</td>
                <td class="text-primary">@string.Format(new AccNumberFormatter(), "{0:N}", planIncoming)</td>
                <td class="text-success">@string.Format(new AccNumberFormatter(), "{0:N}", performIncoming)</td>
                <td class="text-primary">@string.Format(new AccNumberFormatter(), "{0:N}", planSettlement)</td>
                <td class="text-success">@string.Format(new AccNumberFormatter(), "{0:N}", performSettlement)</td>
                <td class="text-primary">@string.Format(new AccNumberFormatter(), "{0:N}", planTax)</td>
                <td class="text-success">@string.Format(new AccNumberFormatter(), "{0:N}", performTax)</td>
                <td class="text-primary">@string.Format(new AccNumberFormatter(), "{0:N}", planRetrived)</td>
                <td class="text-success">@string.Format(new AccNumberFormatter(), "{0:N}", performRetrived)</td>
                <td class="text-primary">@string.Format(new AccNumberFormatter(), "{0:N}", planStorage)</td>
                <td class="text-success">@string.Format(new AccNumberFormatter(), "{0:N}", performStorage)</td>
                <td class="text-primary">@string.Format(new AccNumberFormatter(), "{0:N}", planRecievable)</td>
                <td class="text-success">@string.Format(new AccNumberFormatter(), "{0:N}", performRecievable)</td>
            </tr>
        }
    <tr class="bg-light text-dark">
        <td><strong>合计</strong></td>
        <td class="text-primary">
            @string.Format("{0:N}", lastIncoming + Model.Project.Plan.Where(p => p.Year == Model.Year).Sum(p => p.Incoming))
        </td>
        <td class="text-success">
            @string.Format("{0:N}", lastIncoming + Model.Project.Perform.Where(p => p.Year == Model.Year).Sum(p => p.Incoming))
        </td>
        <td class="text-primary">
            @string.Format("{0:N}", lastSettlement + Model.Project.Plan.Where(p => p.Year == Model.Year).Sum(p => p.Settlement))
        </td>
        <td class="text-success">
            @string.Format("{0:N}", lastSettlement + Model.Project.Perform.Where(p => p.Year == Model.Year).Sum(p => p.Settlement))
        </td>
        <td class="text-primary">@string.Format("{0:N}", totalPlanTax)</td>
        <td class="text-success">@string.Format("{0:N}", totalPerformTax)</td>
        <td class="text-primary">
            @string.Format("{0:N}", lastRetrieved + Model.Project.Plan.Where(p => p.Year == Model.Year).Sum(p => p.Retrieve))
        </td>
        <td class="text-success">
            @string.Format("{0:N}", lastRetrieved + Model.Project.Perform.Where(p => p.Year == Model.Year).Sum(p => p.Retrieve))
        </td>
        <td class="text-primary">@string.Format("{0:N}", totalPlanStorage)</td>
        <td class="text-success">@string.Format("{0:N}", totalPerformStorage)</td>
        <td class="text-primary">@string.Format("{0:N}", totalPlanRecievable)</td>
        <td class="text-success">@string.Format("{0:N}", totalPerformRecievable)</td>
    </tr>
    </tbody>
</table>

@section Scripts{
    <script type="text/javascript">
        $(function () {
            $("div.container").attr("class", "container-fluid");
        })
    </script>
}